// --------------------------- PBR --------------------------------
const float PI = 3.14159265359;

// Trowbridge-Reitz GGX Normal Distribution
float DistributionGGX(float NdotH, float roughness){
    float a = roughness * roughness;
    float a2 = a * a;
    float denom = NdotH * NdotH * (a2 - 1.0) + 1.0;
    denom = PI * denom * denom;
    return a2 / max(denom, 0.000001); // Prevent division by zero
}

// Schlick Geometry Function
float SchlickGGX(float NdotV, float k){
    return NdotV / (NdotV * (1.0 - k) + k);
}

// Smith's Method
float GeometrySmith(float NdotV, float NdotL, float roughness){
    float r = roughness + 1.0;
    float k = (r * r) / 8.0;
    float ggx1 = SchlickGGX(NdotV, k);
    float ggx2 = SchlickGGX(NdotL, k);
    return ggx1 * ggx2;
}

// Fresnel Schlick
vec3 FresnelSchlick(float HdotV, vec3 F0){
    return F0 + (1.0 - F0) * pow(1.0 - HdotV, 5.0);
}

struct Material{
    vec4 albedo;
    float metallic;
    float roughness;
};

vec3 CookTorranceBRDF(vec3 N, vec3 V, vec3 L, vec3 H, vec3 F0, Material material, vec3 radiance, float intensity)
{
    float NdotV = max(dot(N, V), 0.0000001); // Prevent division by zero
    float NdotL = max(dot(N, L), 0.0000001);
    float NdotH = max(dot(N, H), 0.0);
    float HdotV = max(dot(H, V), 0.0);

    float D = DistributionGGX(NdotH, material.roughness);
    float G = GeometrySmith(NdotV, NdotL, material.roughness);
    vec3 F = FresnelSchlick(HdotV, F0);

    vec3 specular = D * G * F;
    specular /= 4.0 * NdotV * NdotL;

    vec3 kD = vec3(1.0) - F;
    kD *= 1.0 - material.metallic;
    vec3 Lo = (kD * intensity * material.albedo.rgb / PI + specular) * radiance * NdotL;
    return Lo;
}